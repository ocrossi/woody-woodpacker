https://www.youtube.com/watch?v=nC1U1LJQL8o

Elf file format 
used for executables, obj files & shared libraries 

composed of 0+ segments & 0+ sections 
------------------------------------------------
segment = runtime part 
absolute adress in file memory + how long it is 
can have no content 
! segments tell where & how to load in computer mem 


examples : 
data segment with global vars 
code segment, file code, loads into mem, then os gets an entrypoint, pointer to the 1st code instructions in the code segment to exec 
segments when loaded in computer mem will be larger, room for unititialized data sometimes needed (global var with no value yet)

------------------------------------------------
section = link time part 
same as section, absolute adress in file mem + length of section 

example:
a binary has shared libraries. It has a segment that tells which shared files to be loaded in computer mem. OS grabs them and puts them close to the other segments

segments & sections can overlap 
------------------------------------------------
ELF header 
starts file 

 --> 64 bytes header 
typedef struct elf64_hdr {
  unsigned char	e_ident[EI_NIDENT];	/* ELF "magic number" */
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;		/* Entry point virtual address */
  Elf64_Off e_phoff;		/* Program header table file offset */(e_offset.txt)
  Elf64_Off e_shoff;		/* Section header table file offset */(e_offset.txt)
// a partir de la c est pas dans des fichiers
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;

check elf.h line 235 for struct as defined in linux kernel

cool command:  readelf -h /bin/cat 
`
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              DYN (Position-Independent Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x3ac0
  Start of program headers:          64 (bytes into file)
  Start of section headers:          37400 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         13
  Size of section headers:           64 (bytes)
  Number of section headers:         31
  Section header string table index: 30
`
------------------------------------------------
Segment headers:

array of headers somewhere in the elf file to define segments 
e_phoff nous donne le debut du tableau de segment header 
e_phentsize nous donne la taille de chaque segment header  
e_phnum nous donne le nombre de segment headers au total

cool command: readelf --segments /bin/ls
------------------------------------------------
Section headers:
array of headers somewhere in the elf file to define sections 
e_shoff nous donne le debut du tableau de segment header 

on s en fout pour du reverse, parce qu on est deja au stade de l exec, linking deja fait 



Notes:
lots of tricks done on elf files to protect data. ASLR (address space layout randomization) for buffer overflows
